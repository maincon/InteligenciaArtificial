# -*- coding: utf-8 -*-
"""atividade_2-aula_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9Cuf9Kzlwvr9g_88Wh66-LlblscrtNp
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt

# %matplotlib inline

def sigmoid(x):
  return 1 / (1 + np.exp(-x))

def sigmoid_prime(x):
  return sigmoid(x) * (1 - sigmoid(x))

def gradienteDescendente(steps, weights, inputs):
  for i in range(steps):
    nn_output = sigmoid(np.dot(inputs, np.squeeze(weights)))
    error = alvo - nn_output
    output_grad = sigmoid_prime(np.dot(inputs, np.squeeze(weights)))
    error_term = error * output_grad
    weights = [learnrate * error_term * inputs]
  return weights

inputs = np.array([0.7, -0.3])
weights = np.array([0.1, 0.8])
alvo = -0.1
learnrate = 0.5

nn_output = sigmoid(np.dot(inputs, weights))
##print(nn_output)

error = alvo - nn_output
##print(error)

output_grad = sigmoid_prime(np.dot(inputs, weights))
##print(output_grad)

error_term = error * output_grad
##print(error_term)

del_w = [learnrate * error_term * inputs]
##print(del_w)

output_pesos_de_entrada = sigmoid(np.dot(inputs, weights) + alvo)
print('Output peso de entrada: ')
print(output_pesos_de_entrada)

output_pesos_gradiente_descendente = sigmoid(np.dot(inputs, np.squeeze(del_w2)) + alvo)
print('Output peso gradiente descendente: ')
print(output_pesos_gradiente_descendente)

steps = 500
new_weights = np.squeeze(gradienteDescendente(steps, weights, inputs))
##print(new_weights)
output_pesos_gradiente_descendente_steps = sigmoid(np.dot(inputs, np.squeeze(new_weights)) + alvo)
print('Output ap√≥s n passos Gradiente Descendente: ')
print(output_pesos_gradiente_descendente_steps)